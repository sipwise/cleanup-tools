# ngcp-cleanup-tools configuration file

# ------ ACCOUNTING RECORDS BACKUP (acc_backup.pl) CONFIG -----

# Description of the logic and config options of the script:
# 
# All tables specified by ACC_TABLES from the database ACC_DB will be
# processed, as well as all tables CDR_TABLES from the database CDR_DB.
#
# The script works in two steps: The first step moves old records out of the
# specified tables and into monthly backup tables, which will be created as
# necessary. The backup tables will have the same names as the source tables,
# with a suffix of "_YYYYMM". The script always performs this task on full
# months, i.e. first day of the month through last day of the month. The
# behavior of this step is controlled by the MONTHS and MONTHS_BACK config
# options.
# The second step is the archival of the older monthly backup tables. Archival
# simply consists of performing a mysqldump of a complete backup table,
# gzipping the dump file and then dropping the table. This step is controlled
# by the options ARCHIVE_MONTHS and ARCHIVE_DIR.

# The MONTHS option specifies how many months worth of accounting records
# should be left untouched in the live DB tables and not be moved to the
# backup tables yet. As explained above, the script always works on complete
# months, so from today's date it will go back MONTHS months and start
# backing up the complete month from there. EXAMPLE: Assuming today is
# December 15th and MONTHS is set to 3: Going back 3 months from today gives
# the script September 15th, so the script will start to process the complete
# month of September and backup all accounting records from September 1st to
# September 30th.
# This value must be >= 1.
MONTHS = 3
# Since there may be even older records in the DB tables than just from a
# single month (delayed or late entries, or the script hasn't been started in
# a while), the MONTHS_BACK options controls how many complete months should
# be processed. Using the example from above: If MONTHS_BACK is set to 6, then
# not only September will be processed, but also 5 more additional months,
# going backwards in time. In other words, all records between April 1st and
# September 30th (6 complete months) will be processed and moved to monthly backup
# tables.
# This value must be >= 1.
MONTHS_BACK = 6

# In the second step of the script, it will process all monthly backup tables
# older than ARCHIVE_MONTHS months and produce a gzipped SQL dump file in the
# target directory ARCHIVE_DIR. The DB tables will be dropped afterwards. This
# process continues for every month going backwards in time until there's no
# more backup tables left.
# EXAMPLE: If today is December 15th and ARCHIVE_MONTHS is set to 12, then the
# first table to be archived will be the December table from last year. After
# that, the November table will be archived, then October and so on, until the
# script tries to archive a non-existant table, at which point it stops.
# This value should be > (MONTHS + MONTHS_BACK)
ARCHIVE_MONTHS = 12
ARCHIVE_DIR = /tmp

# accounting database on proxies (openser) or db1 (accounting)
ACC_DB = accounting
# accounting tables on proxies (acc) or db1 (acc acc_backup acc_trash)
ACC_TABLES = acc,acc_backup,acc_trash
# cdr database (accounting)
CDR_DB = accounting
# cdr tables on proxies (empty) or db1 (cdr)
CDR_TABLES = cdr

# How many entries to move and delete at the same time. Lower values make
# the script take longer to finish, higher values put more strain on the
# database (longer table locks or bigger transactions).
BATCH = 1000


# ------ DATABASE ACCESS CONFIG -----

# Shared by both scripts (acc_backup.pl and binlog-purge.pl)
DBUSER = root
DBPASS = 1freibier!
DBHOST = localhost


# DB access credentials for binlog cleanup
DBREMOTEUSER = replicator
DBREMOTEPASS = wait4Data
